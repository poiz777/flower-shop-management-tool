<?php 

	namespace  App\Entity\Repo;

	use App\Entity\BHJournal;
	use App\Entity\Personen;
	use App\Entity\ProdukteKategorie;
	use App\Entity\Rechnung;
	use App\Entity\RechnungPosten;
	use App\Entity\Verkauf;
	use App\Entity\Zahlungsmittel;
	use Doctrine\ORM\EntityRepository;
	use Doctrine\ORM\EntityManagerInterface;

	use Doctrine\ORM\Mapping\ClassMetadata;

	/**
	 * VerkaufRepo
	 * Repository Class automatically generated by Poiz Doctrine Mediator.
	 * You may add additional Methods to your Repository as well...
	 **/
	class VerkaufRepo extends EntityRepository { 


		/**
		 * @var EntityManagerInterface
		 */
		protected $eMan;
		
		/**
		 * @var array
		 */
		private $client         = [];
		
		/**
		 * @var array
		 */
		private $bill           = [];
		
		/**
		 * @var array
		 */
		private $billPosts     = [];
		
		/**
		 * @var array
		 */
		private $bhJournal      = [];
		
		/**
		 * @var array
		 */
		private $productCats    = [];
		
		/**
		 * @var array
		 */
		private $paymentMethod  = [];


		public function __construct(EntityManagerInterface $em, ClassMetadata $class){
			parent::__construct($em, $class); 
			$this->eMan			        = $em;
			$this->client           = [];
			$this->bill             = [];
			$this->billPosts        = [];
			$this->bhJournal        = [];
			$this->productCats      = [];
			$this->paymentMethod    = [];
			
			//  Rechnung.Rechnung_kunde == client | ClientID and Rechnung are connected...
		}
		
		public function findUnique($config=[], $ordering=[]){
			//todo
		}
		
		public function fetchPrintableSalesData($billID, $asArray=true){
			/**@var Verkauf $saleData */
			$rayResult  = [];
			$saleData   = $this->eMan->getRepository(Verkauf::class)->find($billID);
			
			if($saleData){
				$tmpSalesData = $this->setProps($saleData, $asArray);
				$rayResult    = $asArray ? $tmpSalesData->getEntityBank() : $tmpSalesData;
			}
			return $rayResult;
		}
		
		protected function setProps(Verkauf $sale, $asArray=true){
			if($sale->getVerkaufzeit() instanceof \DateTime){
				$sale->setVerkaufzeit($sale->getVerkaufzeit()->format('H:i:s'));
			}
			$this->bindRelationalData($sale, $asArray);
			$sale->setBhJournal($this->bhJournal);
			$sale->setClient($this->client);
			# $sale->setBill($this->bill);
			# $sale->setBillPosts($this->billPosts);
			$sale->setProductCats($this->productCats);
			$sale->setPaymentMethod($this->paymentMethod);
			return $sale;
		}
		
		protected function bindRelationalData(Verkauf $sale = null, $asArray=true) {
			# $this->bill           = $this->getAssociatedBill($sale, $asArray);
			# $this->billPosts      = $this->getAssociatedBillPosts($sale, $asArray);
			$this->client         = $this->getAssociatedClient($sale, $asArray);
			$this->bhJournal      = $this->getAssociatedBHJournal($sale, $asArray);
			$this->paymentMethod  = $this->getAssociatedPaymentMethod($sale, $asArray);
			return $this;
		}
		
		protected function getAssociatedBill(Verkauf $sale = null, $asArray=true) {
			return [];
		}
		
		protected function getAssociatedBillPosts(Verkauf $sale = null, $asArray=true) {
			return [];
		}
		
		// OK
		protected function getAssociatedBHJournal(Verkauf $sale = null, $asArray=true) {
			/** @var BHJournal        $BHJournal */
			/** @var RechnungPosten   $billPost */
			$associateBill      = [];
			$associateBillPosts = [];
			$associateData      = [];
			$associatePCats     = [];
			$BHJournals         = $this->eMan->getRepository(BHJournal::class)->findBy(
				['BH_Journal_verkauf_id' => $sale->getVerkaufid()]
			);
			
			if($asArray){
				if($BHJournals){
					foreach ($BHJournals as $BHJournal){
						// IMMEDIATELY INJECT + BIND-IN THE PRODUCT-CATEGORY HERETO
						// CONSIDER MOVING THE CODE BELOW TO AN OWN METHOD....
						// `Rechnung_posten_BH_Journal_id` & `Rechnung_posten_Rechnung_id`  EXISTS WITHIN `Rechnung_posten` TABLE
						$productCat       = $this->eMan->getRepository(ProdukteKategorie::class)->findOneBy(
							['produktekategorie_BH_Konto' => $BHJournal->getBHJournalKontoHaben()]
						);
						if($productCat){
							$associatePCats[] = $asArray ? $productCat->getEntityBank() : $productCat;
							$BHJournal->setProductCat($associatePCats[0]);
						}
						
						// AGAIN; INJECT + BIND-IN THE BILL AND THE BILL-POSTS HERETO
						// CONSIDER MOVING THE CODE BELOW TO AN OWN METHOD....
						$billPosts        = $this->eMan->getRepository(RechnungPosten::class)->findBy(
							['Rechnung_posten_BH_Journal_id' => $BHJournal->getBHJournalId()]
						);
						
						if($billPosts){
							foreach ($billPosts as $billPost){
								$associateBillPosts[] = $asArray ? $billPost->getEntityBank() : $billPost;
								$BHJournal->setBillPosts($associateBillPosts[0]);
							}
							$bill           = $this->eMan->getRepository(Rechnung::class)->find($billPost->getRechnungId());
							if($bill){
								$bill         = $asArray ? $bill->getEntityBank() : $bill;
								$this->bill   = (array)$bill;
								$BHJournal->setBill((array)$bill);
								$associateBill= $bill;
							}
						}
						$associateData[]  = $BHJournal->getEntityBank();
					}
				}
			}
			$this->bill         =  $associateBill;
			$this->billPosts    =  $associateBillPosts;
			$this->productCats  =  $associatePCats;
			return $asArray ? $associateData : $BHJournals;
		}
		
		// OK
		protected function getAssociatedPaymentMethod(Verkauf $sale = null, $asArray=true) {
			$paymentMethod  = $this->eMan->getRepository(Zahlungsmittel::class)->findOneBy(
				['Zahlungsmittel_id' => $sale->getVerkaufzahlungsmittel()],
			);
			
			if($paymentMethod){
				$paymentMethod  = $asArray ? $paymentMethod->getEntityBank() : $paymentMethod;
			}
			return $paymentMethod;
		}
		
		// OK
		protected function getAssociatedClient(Verkauf $sale, $asArray=true) {
			return $this->eMan->getRepository(Personen::class)->fetchOnePerson($sale->getVerkaufkunde(), true);
			
			/*
			$saleClient = $this->eMan->getRepository(Personen::class)->fetchOnePerson($sale->getVerkaufkunde(), true);
			if($saleClient){
				$saleClient  = $asArray ? $saleClient->getEntityBank() : $saleClient;
			}
			return $saleClient;
			*/
		}
		
		protected function normalizeSQLModeForGroupBy(){
			/** @var \Doctrine\DBAL\Driver\PDOConnection $dbConn */
			#$sql        = "set global sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';";
			$sql        = "SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));";
			$dbConn     = $this->eMan->getConnection();
			$query      = $dbConn->prepare($sql);
			$query->execute();
		}

	}
