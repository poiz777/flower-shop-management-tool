<?php 

	namespace  App\Entity\Repo;

	use App\Entity\Ansprechform;
	use App\Entity\Geschlecht;
	use App\Entity\Personen;
	use Doctrine\ORM\EntityRepository;
	use Doctrine\ORM\EntityManagerInterface;

	use Doctrine\ORM\Mapping\ClassMetadata;

	/**
	 * PersonenRepo
	 * Repository Class automatically generated by Poiz Doctrine Mediator.
	 * You may add additional Methods to your Repository as well...
	 **/
	class PersonenRepo extends EntityRepository { 


		/**
		 * @var EntityManagerInterface
		 */
		protected $eMan;

		/**
		 * @var string
		 */
		protected $mrMrs;



		public function __construct(EntityManagerInterface $em, ClassMetadata $class){
			parent::__construct($em, $class); 
			$this->eMan			= $em;
		}
		
		public function findUnique($config=[], $ordering=[]){
			//todo
		}

		public function fetchClientByID($personID, $asArray=true){
			return $this->fetchOnePerson($personID, $asArray);
		}

		public function fetchOnePerson($personID, $asArray=true){
			/**@var Personen $tmpPersonData */
			$rayResult  = [];
			$personData = $this->eMan->getRepository(Personen::class)->find($personID);
			
			if($personData){
				$tmpPersonData  = $this->setProps($personData, $asArray);
				$rayResult      = $asArray ? $tmpPersonData->getEntityBank() : $tmpPersonData;
			}
			return $rayResult;
		}

		public function fetchAllClients($asArray=true){
			/**@var Personen $clientData */
			$rayResult    = [];
			$clientsData  = $this->eMan->getRepository(Personen::class)->findAll();
			
			if($clientsData){
				foreach($clientsData as $clientData){
					$tmpPersonData  = $this->setProps($clientData, $asArray);
					$rayResult[]    = $asArray ? $tmpPersonData->getEntityBank() : $tmpPersonData;
				}
			}
			return $rayResult;
		}

		public function fetchClientsBy($criteria, $orderBy=null, $limit=null, $offset=null, $asArray=true){
			/**@var Personen $clientData */
			$rayResult    = [];
			$clientsData  = $this->eMan->getRepository(Personen::class)->findBy($criteria, $orderBy, $limit, $offset);
			
			if($clientsData){
				foreach($clientsData as $clientData){
					$tmpPersonData  = $this->setProps($clientData, $asArray);
					$rayResult[]    = $asArray ? $tmpPersonData->getEntityBank() : $tmpPersonData;
				}
			}
			return $rayResult;
		}
		
		protected function setProps(Personen $personData, $asArray=true){
			$this->bindRelationalData($personData, $asArray);
			$personData->setMrMrs($this->mrMrs);
			
			return $personData;
		}
		
		protected function bindRelationalData(Personen $personData = null, $asArray=true) {
			$this->mrMrs  = $this->getAssociatedPersonGender($personData, $asArray);
			return $this;
		}
		
		protected function getAssociatedPersonGender(Personen $personData, $asArray){
			$personGender     = [];
			$personGenderObj  = $this->eMan->getRepository(Geschlecht::class)->find($personData->getGeschlecht());
			
			if($personGenderObj){
				$personGender  = $asArray ? $personGenderObj->getEntityBank() : $personGenderObj;
			}
			return $personGender;
		}
		
		protected function getAssociatedPersonAddressForm(Personen $personData, $asArray){
			$personAddressForm    = [];
			$personAddressFormObj = $this->eMan->getRepository(Ansprechform::class)->find($personData->getAnsprechform());
			
			if($personAddressFormObj){
				$personAddressForm  = $asArray ? $personAddressFormObj->getEntityBank() : $personAddressFormObj;
			}
			return $personAddressForm;
		}


	}
