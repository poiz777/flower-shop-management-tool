<?php 

	namespace  App\Entity\Repo;

	use App\Entity\Personen;
	use App\Entity\Ticketeintrag;
	use App\Entity\Tickets;
	use App\Forms\TicketSearchEntity;
	use Doctrine\ORM\EntityRepository;
	use Doctrine\ORM\EntityManagerInterface;

	use Doctrine\ORM\Mapping\ClassMetadata;

	/**
	 * TicketsRepo
	 * Repository Class automatically generated by Poiz Doctrine Mediator.
	 * You may add additional Methods to your Repository as well...
	 **/
	class TicketsRepo extends EntityRepository { 


		/**
		 * @var EntityManagerInterface
		 */
		protected $eMan;
		
		/**
		 * @var \App\Entity\Ticketeintrag[]
		 */
		private $ticketPosts;
		
		/**
		 * @var array
		 */
		private $client;
		
		/**
		 * @var int
		 */
		private $ticketsCount;
		
		/**
		 * @var int
		 */
		private $ticketPostsCount;
		
		/**
		 * @var string
		 */
		private $ticketDueTime;
		
		/**
		 * @var string
		 */
		private $ticketDueHour;
		
		public function __construct(EntityManagerInterface $em, ClassMetadata $class){
			parent::__construct($em, $class);
			$this->eMan			        = $em;
			$this->client           = [];
			$this->ticketPosts      = [];
			$this->ticketsCount     = 0;
			$this->ticketPostsCount = 0;
		}
		
		public function findUnique($config=[], $ordering=[]){
			//todo
		}
		
		public function findTicketsForCompanyBranchByDate($companyBranch, \DateTime $date, $asArray=true){
			/**@var Tickets $ticket */
			# $rayResult  = [];
			$tickets    = $this->eMan->getRepository(Tickets::class)->findBy(
				['ticket_MA_verantwortung' => $companyBranch, 'ticket_endtermin' => $date],
				['ticket_endtermin' => 'ASC', 'ticket_zeit' => 'ASC', 'ticket_status' => 'ASC']
			);
			/*
			if($tickets){
				$this->ticketsCount = sizeof($tickets);
				foreach($tickets as &$ticket){
					$this->ticketPostsCount = ($tp = $this->getAssociatedTicketPosts($ticket->getTicketId(), $asArray)) ? sizeof($tp) : null;
					$tmpTicket    = $this->setProps($ticket, $asArray);
					$rayResult[]  = $asArray ? $tmpTicket->getEntityBank() : $tmpTicket;
				}
			}
			*/
			return $this->buildEnhancedResultSet($tickets, $asArray);   // $rayResult;
		}
		
		public function searchTickets(TicketSearchEntity $ticket, $asArray=true){
			$qb             = $this->eMan->getConnection()->createQueryBuilder();
			$condClauseAND  = $qb->expr()->andX();
			// BUILD SEARCH CONDITIONS USING `AND` AS CONJUNCTION...
			if( ($dept = $ticket->getDepartment()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_MA_verantwortung', $qb->expr()->literal("{$dept}")));
			}
			if( ($opener = $ticket->getTicketOpener()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_opener', $qb->expr()->literal("{$opener}")));
			}
			if( ($title = $ticket->getTicketTitle()) != "" ){
				$condClauseAND->add($qb->expr()->like('ticket_header', $qb->expr()->literal("%{$title}%")));
			}
			if( ($type = $ticket->getType()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_typ', $qb->expr()->literal("{$type}")));
			}
			if( ($status = $ticket->getStatus()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_status', $qb->expr()->literal("{$status}")));
			}
			if( ($knowledge = $ticket->getKnowledgeBaseID()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_knowledgeID', $qb->expr()->literal("{$knowledge}")));
			}
			if( ($clientID = $ticket->getClient()) != "" ){
				$condClauseAND->add($qb->expr()->eq('ticket_kunde', $qb->expr()->literal("{$clientID}")));
			}
			if( ($startDate = $ticket->getStartDate()) != "" ){
				$condClauseAND->add($qb->expr()->gte('DATE(ticket_endtermin)', $qb->expr()->literal($startDate->format('Y-m-d'))));
			}
			if( ($endDate = $ticket->getEndDate()) != "" ){
				$condClauseAND->add($qb->expr()->lte('DATE(ticket_endtermin)', $qb->expr()->literal($endDate->format('Y-m-d'))));
			}
			
			$qb->select('tkt.*')
			   ->from('tickets', 'tkt')
			   ->where($condClauseAND)
				 ->addOrderBy('tkt.ticket_endtermin', 'DESC')
				 ->addOrderBy('tkt.ticket_zeit', 'DESC');

			$stm        = $qb->execute();
			$results    = $stm->fetchAll();
			$searchHits = [];
			
			foreach($results as $result){
				$hit      = new Tickets();
				$hit->autoSetClassProps($result);
				$searchHits[] = $hit;
			}
			
			# dump($this->buildEnhancedResultSet($tickets, $asArray));
			return $this->buildEnhancedResultSet($searchHits, $asArray);
		}
		
		public function findTicketsByStatusForCompanyBranchByDate($status, $companyBranch, $date, $asArray=true){
			# findTicketsByStatusForCompanyBranchByDate([1, 2], [940, 941], date("Y-m-d"), true);
			#->where('u.id = 1') ->orWhere('u.id = 2');
			$qb         = $this->eMan->createQueryBuilder();
			$andCond    = $qb->expr()->andX();
			$andCond->add($qb->expr()->in('tkt.ticket_status', $status));
			$andCond->add($qb->expr()->in('tkt.ticket_MA_verantwortung', $companyBranch));
			$andCond->add($qb->expr()->eq('tkt.ticket_endtermin', $qb->expr()->literal($date)));
			$qb->select('tkt')
				->from(Tickets::class, 'tkt')
				->where($andCond)
				->addOrderBy('tkt.ticket_endtermin',  'ASC')
				->addOrderBy('tkt.ticket_zeit',       'ASC')
				->addOrderBy('tkt.ticket_status',     'ASC');
			$query    = $qb->getQuery();
			$tickets  = $query->execute();
			/*
			$tickets    = $this->eMan->getRepository(Tickets::class)->findBy(
				['ticket_status'    => $status, 'ticket_endtermin' => $date, 'ticket_MA_verantwortung' => $companyBranch],
				['ticket_endtermin' => 'ASC', 'ticket_zeit' => 'ASC', 'ticket_status' => 'ASC']
			);
			*/
			
			# dump($this->buildEnhancedResultSet($tickets, $asArray));
			return $this->buildEnhancedResultSet($tickets, $asArray);
		}
		
		public function findTicketsAssociatedWithWDB($kid, $asArray=true){
			/**@var Tickets $ticket */
			$rayResult  = [];
			$tickets    = $this->eMan->getRepository(Tickets::class)->findBy(
				['ticket_knowledgeID' => $kid],
				['ticket_endtermin' => 'ASC', 'ticket_zeit' => 'ASC', 'ticket_status' => 'ASC']
			);
			
			
			if($tickets){
				$this->ticketsCount = sizeof($tickets);
				foreach($tickets as &$ticket){
					$this->ticketPostsCount = ($tp = $this->getAssociatedTicketPosts($ticket->getTicketId(), $asArray)) ? sizeof($tp) : null;
					$tmpTicket    = $this->setProps($ticket, $asArray);
					$rayResult[]  = $asArray ? $tmpTicket->getEntityBank() : $tmpTicket;
				}
			}
			return $rayResult;
		}
		
		public function fetchTicketForCompanyBranchByID($companyBranch, $id, $asArray=true){
			/**@var Tickets $ticket */
			$rayResult  = [];
			$ticket     = $this->eMan->getRepository(Tickets::class)->find($id);
			
			if($ticket){
				$this->ticketPostsCount = ($tp = $this->getAssociatedTicketPosts($ticket->getTicketId(), $asArray)) ? sizeof($tp) : null;
				$tmpTicket              = $this->setProps($ticket, $asArray);
				$rayResult              = $asArray ? $tmpTicket->getEntityBank() : $tmpTicket;
			}
			return $rayResult;
		}
		
		protected function setProps(Tickets $ticket, $asArray=true){
			$this->bindRelationalData($ticket, $asArray);
			$this->ticketDueTime    = preg_replace("#(\:\d{2})$#", "", $ticket->getTicketZeit());
			$this->ticketDueHour    = preg_replace("#\:.+$#", "", $ticket->getTicketZeit());
			
			$ticket->setTicketPosts($this->ticketPosts);
			$ticket->setChildren($this->ticketPosts);
			$ticket->setClient($this->client);
			$ticket->setTicketDueHour($this->ticketDueHour);
			$ticket->setTicketDueTime($this->ticketDueTime);
			
			$ticket->setTicketsCount($this->ticketsCount);
			$ticket->setTicketPostsCount($this->ticketPostsCount);
			
			return $ticket;
		}
		
		protected function bindRelationalData(Tickets $ticket = null, $asArray=true) {
			$this->ticketPosts  = $this->getAssociatedTicketPosts($ticket->getTicketId(), $asArray);
			$this->client       = $this->getAssociatedTicketClient($ticket, $asArray);
			return $this;
		}

		protected function getAssociatedTicketPosts($ticketID, $asArray=true) {
			$ticketPosts  = [];
			$posts        = $this->eMan->getRepository(Ticketeintrag::class)->findBy(
				['ticketeintrag_ticket_id' => $ticketID],
				['ticketeintrag_id' => 'DESC', 'ticketeintrag_ticket_id' => 'DESC', 'ticketeintrag_datum' => 'DESC']
			);
			
			if($asArray){
				if($posts){
					foreach ($posts as $post){
						$ticketPosts[]  = $post->getEntityBank();
					}
				}
			}
			return  $asArray ? $ticketPosts : $posts;
		}

		protected function getAssociatedTicketClient(Tickets $ticket, $asArray=true) {
			$ticketClient = $this->eMan->getRepository(Personen::class)->find($ticket->getTicketKunde());
			
			if($asArray){
				if($ticketClient){
					return $ticketClient->getEntityBank();
				}
			}
			return  $ticketClient;
		}
		
		protected function normalizeSQLModeForGroupBy(){
			/** @var \Doctrine\DBAL\Driver\PDOConnection $dbConn */
			#$sql        = "set global sql_mode = 'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';";
			$sql        = "SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));";
			$dbConn     = $this->eMan->getConnection();
			$query      = $dbConn->prepare($sql);
			$query->execute();
		}
		
		private function buildEnhancedResultSet($tickets, $asArray=true){
			/**@var Tickets $ticket*/
			$rayResult    = [];
			if($tickets){
				$this->ticketsCount = sizeof($tickets);
				foreach($tickets as &$ticket){
					$this->ticketPostsCount = ($tp = $this->getAssociatedTicketPosts($ticket->getTicketId(), $asArray)) ? sizeof($tp) : null;
					$tmpTicket    = $this->setProps($ticket, $asArray);
					$rayResult[]  = $asArray ? $tmpTicket->getEntityBank() : $tmpTicket;
				}
			}
			return $rayResult;
		}
			
		// 2 METHODS DIRECTLY BELOW THIS COMMENT WERE
		// COPIED FORM DATE CALCULATOR TO BE MADE PART OF THIS REPO...
		// PLEASE, REVISIT...
		private function getPendingTicketsForToday(){
			$qb   = $this->em->getConnection()->createQueryBuilder();
			$and  = $qb->expr()->andX();
			$and->add($qb->expr()->lt('tkt.ticket_status', 3));
			$and->add($qb->expr()->eq('tkt.ticket_endtermin', $qb->expr()->literal( date("Y-m-d"))));
			$qb->select(
				'tkt.ticket_header',
				'tkt.ticket_kunde',
				'tkt.ticket_id',
				'tkt.ticket_MA_verantwortung',
				'tkt.ticket_endtermin',
				'tkt.ticket_zeit',
				'tst.ticket_status_name AS ticket_status',
				'ttp.ticket_typ_name AS ticket_typ',
				'tpr.ticket_prio_name AS ticket_prio',
				'tkt.ticket_gelesen',
				'psn.name AS lastName',
				'psn.Firma AS company',
				'psn.vorname AS workerFirstName',
				'CONCAT(psn.vorname, " ", psn.name) AS fullName',
				'psn.vorname AS firstName'
			)
			   ->from('tickets', 'tkt');
			$qb ->leftJoin('tkt', 'personen', 'psn', 'tkt.ticket_kunde=psn.kundenid AND tkt.ticket_MA_verantwortung = psn.kundenid AND tkt.ticket_MA_verantwortung != 942')
			    ->leftJoin('tkt', 'ticket_status', 'tst', 'tst.ticket_status_id=tkt.ticket_status')
			    ->leftJoin('tkt', 'ticket_typ', 'ttp', 'ttp.ticket_typ_id=tkt.ticket_typ')
			    ->leftJoin('tkt', 'ticket_prio', 'tpr', 'tpr.ticket_prio_id=tkt.ticket_prio')
			    ->where($and)
			    ->orderBy('tkt.ticket_zeit', 'ASC')
			    ->orderBy('tkt.ticket_endtermin', 'ASC');
			return  $qb->execute()->fetchAll();
		}
		
		private function getTicketsForMonth($month, $filiale){
			/**@var \Doctrine\ORM\QueryBuilder $qb */
			$qb   = $this->em->getConnection()->createQueryBuilder();
			$and  = $qb->expr()->andX();
			$and->add($qb->expr()->eq('MONTH(tkt.ticket_endtermin)', $month));
			$and->add($qb->expr()->eq('tkt.ticket_MA_verantwortung', $filiale));
			$and->add($qb->expr()->eq('tkt.ticket_typ', 1));
			$and->add($qb->expr()->lt('tkt.ticket_status', 3));
			
			$qb->select('tkt.*', 'tet.*')
			   ->from('tickets', 'tkt')
			   ->leftJoin('tkt', 'ticketeintrag', 'tet', 'tkt.ticket_id=tet.ticketeintrag_ticket_id')
			   ->where($and);
			$resultSet = $qb->execute()->fetchAll();
			
			return $resultSet;
		}
	}
	